{"ast":null,"code":"var _jsxFileName = \"/home/jschneck/programming_projects/JavaScriptProjects/typed-Game-of-life/john/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport BoardButton from \"./components/Tile\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const [grid, setGrid] = useState(Array(50).fill(Array(75).fill(0)));\n\n  const handleTileEvent = (i, j) => {\n    let gridCopy = grid.map(arr => arr.slice());\n    gridCopy[i][j] = grid[i][j] ? false : true;\n    setGrid(gridCopy);\n  };\n\n  const renderTiles = () => {\n    grid.map((row, i) => {\n      return grid[i].map((val, j) => {\n        return /*#__PURE__*/_jsxDEV(BoardButton, {\n          keyID: `${i}-${j}`,\n          tileName: grid[i][j] ? \"tile-on\" : \"tile-off\",\n          onClick: () => handleTileEvent(i, j)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 7\n        }, this);\n      });\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"basic-header\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Conway's Game of Life\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"grid\",\n        gridTemplateColumns: `repeat(${grid[0].length}, 20px`\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 3\n  }, this);\n};\n\n_s(App, \"Qohgl01/CMkhflAzkpbuacQzt9Y=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/jschneck/programming_projects/JavaScriptProjects/typed-Game-of-life/john/src/App.tsx"],"names":["useState","BoardButton","App","grid","setGrid","Array","fill","handleTileEvent","i","j","gridCopy","map","arr","slice","renderTiles","row","val","display","gridTemplateColumns","length"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAOC,WAAP,MAAwB,mBAAxB;AAEA,OAAO,WAAP;;;AAEA,MAAMC,GAAa,GAAG,MAAM;AAAA;;AAC3B,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBJ,QAAQ,CAAcK,KAAK,CAAC,EAAD,CAAL,CAAUC,IAAV,CAAeD,KAAK,CAAC,EAAD,CAAL,CAAUC,IAAV,CAAe,CAAf,CAAf,CAAd,CAAhC;;AAEA,QAAMC,eAAe,GAAG,CAACC,CAAD,EAAYC,CAAZ,KAA0B;AACjD,QAAIC,QAAqB,GAAGP,IAAI,CAACQ,GAAL,CAASC,GAAG,IAAIA,GAAG,CAACC,KAAJ,EAAhB,CAA5B;AACAH,IAAAA,QAAQ,CAACF,CAAD,CAAR,CAAYC,CAAZ,IAAiBN,IAAI,CAACK,CAAD,CAAJ,CAAQC,CAAR,IAAa,KAAb,GAAqB,IAAtC;AACAL,IAAAA,OAAO,CAACM,QAAD,CAAP;AACA,GAJD;;AAMA,QAAMI,WAAW,GAAG,MAAM;AACzBX,IAAAA,IAAI,CAACQ,GAAL,CAAU,CAACI,GAAD,EAAMP,CAAN,KAAY;AACrB,aACCL,IAAI,CAACK,CAAD,CAAJ,CAAQG,GAAR,CAAa,CAACK,GAAD,EAAMP,CAAN,KAAY;AACxB,4BACC,QAAC,WAAD;AACA,UAAA,KAAK,EAAG,GAAED,CAAE,IAAGC,CAAE,EADjB;AAEA,UAAA,QAAQ,EAAEN,IAAI,CAACK,CAAD,CAAJ,CAAQC,CAAR,IAAa,SAAb,GAAyB,UAFnC;AAGA,UAAA,OAAO,EAAE,MAAMF,eAAe,CAACC,CAAD,EAAIC,CAAJ;AAH9B;AAAA;AAAA;AAAA;AAAA,gBADD;AAOA,OARD,CADD;AAWA,KAZD;AAaA,GAdD;;AAgBA,sBACC;AAAA,4BACC;AAAQ,MAAA,SAAS,EAAC,cAAlB;AAAA,6BACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,YADD,eAMC;AACA,MAAA,KAAK,EAAE;AACNQ,QAAAA,OAAO,EAAE,MADH;AAENC,QAAAA,mBAAmB,EAAG,UAASf,IAAI,CAAC,CAAD,CAAJ,CAAQgB,MAAO;AAFxC;AADP;AAAA;AAAA;AAAA;AAAA,YAND;AAAA;AAAA;AAAA;AAAA;AAAA,UADD;AAeA,CAxCD;;GAAMjB,G;;KAAAA,G;AA2CN,eAAeA,GAAf","sourcesContent":["import { useState } from \"react\";\nimport BoardButton from \"./components/Tile\";\n\nimport \"./App.css\";\n\nconst App: React.FC = () => {\n\tconst [grid, setGrid] = useState<boolean[][]>(Array(50).fill(Array(75).fill(0)))\n\n\tconst handleTileEvent = (i: number, j: number) => {\n\t\tlet gridCopy: boolean[][] = grid.map(arr => arr.slice());\n\t\tgridCopy[i][j] = grid[i][j] ? false : true;\n\t\tsetGrid(gridCopy);\n\t}\n\n\tconst renderTiles = () => {\n\t\tgrid.map( (row, i) => {\n\t\t\treturn (\n\t\t\t\tgrid[i].map( (val, j) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<BoardButton \n\t\t\t\t\t\tkeyID={`${i}-${j}`} \n\t\t\t\t\t\ttileName={grid[i][j] ? \"tile-on\" : \"tile-off\"}\t\n\t\t\t\t\t\tonClick={() => handleTileEvent(i, j)} \n\t\t\t\t\t\t/>\n\t\t\t\t\t)\n\t\t\t\t})\n\t\t\t)\n\t\t})\n\t}\n\n\treturn (\n\t\t<div>\n\t\t\t<header className=\"basic-header\">\n\t\t\t\t<h1>\n\t\t\t\t\tConway's Game of Life\n\t\t\t\t</h1>\n\t\t\t</header>\n\t\t\t<div\n\t\t\tstyle={{\n\t\t\t\tdisplay: \"grid\",\n\t\t\t\tgridTemplateColumns: `repeat(${grid[0].length}, 20px`\n\t\t\t}}>\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\n\nexport default App;"]},"metadata":{},"sourceType":"module"}