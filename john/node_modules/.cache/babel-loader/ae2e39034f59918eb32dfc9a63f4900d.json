{"ast":null,"code":"var _jsxFileName = \"/home/jschneck/programming_projects/JavaScriptProjects/typed-Game-of-life/john/src/components/Board.tsx\";\nimport React from 'react';\nimport BoardButton from './Tile';\nimport \"./styles.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Board = ({\n  grid,\n  setGrid\n}) => {\n  const handleTileEvent = (i, j) => {\n    let gridCopy = grid.map(arr => arr.slice());\n    gridCopy[i][j] = grid[i][j] ? false : true;\n    setGrid(gridCopy);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"board-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Iteration:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"grid\",\n        gridTemplateColumns: `repeat(${grid[0].length}, 20px`,\n        justifyContent: \"center\"\n      },\n      children: grid.map((row, i) => {\n        return grid[i].map((val, j) => {\n          return /*#__PURE__*/_jsxDEV(BoardButton, {\n            keyID: `${i}-${j}`,\n            tileName: grid[i][j] ? \"tile-on\" : \"tile-off\",\n            onClick: () => handleTileEvent(i, j)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 35,\n            columnNumber: 9\n          }, this);\n        });\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Cells Alive:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 3\n  }, this);\n};\n\n_c = Board;\nexport default Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["/home/jschneck/programming_projects/JavaScriptProjects/typed-Game-of-life/john/src/components/Board.tsx"],"names":["React","BoardButton","Board","grid","setGrid","handleTileEvent","i","j","gridCopy","map","arr","slice","display","gridTemplateColumns","length","justifyContent","row","val"],"mappings":";AAAA,OAAOA,KAAP,MAAgC,OAAhC;AACA,OAAOC,WAAP,MAAwB,QAAxB;AACA,OAAO,cAAP;;;AAQA,MAAMC,KAA2B,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA;AAAR,CAAD,KAAuB;AAE1D,QAAMC,eAAe,GAAG,CAACC,CAAD,EAAYC,CAAZ,KAA0B;AACjD,QAAIC,QAAqB,GAAGL,IAAI,CAACM,GAAL,CAASC,GAAG,IAAIA,GAAG,CAACC,KAAJ,EAAhB,CAA5B;AACAH,IAAAA,QAAQ,CAACF,CAAD,CAAR,CAAYC,CAAZ,IAAiBJ,IAAI,CAACG,CAAD,CAAJ,CAAQC,CAAR,IAAa,KAAb,GAAqB,IAAtC;AACAH,IAAAA,OAAO,CAACI,QAAD,CAAP;AACA,GAJD;;AAMA,sBACC;AAAK,IAAA,SAAS,EAAC,iBAAf;AAAA,4BACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADD,eAIC;AACC,MAAA,KAAK,EAAE;AACNI,QAAAA,OAAO,EAAE,MADH;AAENC,QAAAA,mBAAmB,EAAG,UAASV,IAAI,CAAC,CAAD,CAAJ,CAAQW,MAAO,QAFxC;AAGNC,QAAAA,cAAc,EAAE;AAHV,OADR;AAAA,gBAOGZ,IAAI,CAACM,GAAL,CAAU,CAACO,GAAD,EAAMV,CAAN,KAAY;AACvB,eACCH,IAAI,CAACG,CAAD,CAAJ,CAAQG,GAAR,CAAa,CAACQ,GAAD,EAAMV,CAAN,KAAY;AACxB,8BACC,QAAC,WAAD;AACC,YAAA,KAAK,EAAG,GAAED,CAAE,IAAGC,CAAE,EADlB;AAEC,YAAA,QAAQ,EAAEJ,IAAI,CAACG,CAAD,CAAJ,CAAQC,CAAR,IAAa,SAAb,GAAyB,UAFpC;AAGC,YAAA,OAAO,EAAE,MAAMF,eAAe,CAACC,CAAD,EAAIC,CAAJ;AAH/B;AAAA;AAAA;AAAA;AAAA,kBADD;AAOA,SARD,CADD;AAWA,OAZC;AAPH;AAAA;AAAA;AAAA;AAAA,YAJD,eAyBC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAzBD;AAAA;AAAA;AAAA;AAAA;AAAA,UADD;AA+BA,CAvCD;;KAAML,K;AAyCN,eAAeA,KAAf","sourcesContent":["import React, { useState } from 'react';\nimport BoardButton from './Tile';\nimport \"./styles.css\";\n\n\ninterface BoardProps {\n\tgrid: boolean[][],\n\tsetGrid: (grid: boolean[][]) => void,\n}\n\nconst Board: React.FC<BoardProps> = ({ grid, setGrid }) => {\n\n\tconst handleTileEvent = (i: number, j: number) => {\n\t\tlet gridCopy: boolean[][] = grid.map(arr => arr.slice());\n\t\tgridCopy[i][j] = grid[i][j] ? false : true;\n\t\tsetGrid(gridCopy);\n\t}\n\n\treturn (\n\t\t<div className=\"board-container\">\n\t\t\t<h1>\n\t\t\t\tIteration: \n\t\t\t</h1>\n\t\t\t<div\n\t\t\t\tstyle={{\n\t\t\t\t\tdisplay: \"grid\",\n\t\t\t\t\tgridTemplateColumns: `repeat(${grid[0].length}, 20px`,\n\t\t\t\t\tjustifyContent: \"center\"\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t{ grid.map( (row, i) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\tgrid[i].map( (val, j) => {\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<BoardButton \n\t\t\t\t\t\t\t\t\tkeyID={`${i}-${j}`} \n\t\t\t\t\t\t\t\t\ttileName={grid[i][j] ? \"tile-on\" : \"tile-off\"}\t\n\t\t\t\t\t\t\t\t\tonClick={() => handleTileEvent(i, j)} \n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t})\n\t\t\t\t\t)\n\t\t\t\t}) }\n\t\t\t</div>\n\t\t\t<h1>\n\t\t\t\tCells Alive: \n\t\t\t</h1>\n\t\t</div>\n\t)\n}\n\nexport default Board;"]},"metadata":{},"sourceType":"module"}