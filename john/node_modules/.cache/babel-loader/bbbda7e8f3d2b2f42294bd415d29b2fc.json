{"ast":null,"code":"import React from'react';import Tile from'./Tile';import\"./styles.css\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";var Board=function Board(_ref){var grid=_ref.grid,setGrid=_ref.setGrid,iteration=_ref.iteration,cellsAlive=_ref.cellsAlive,setCellsAlive=_ref.setCellsAlive;var handleTileEvent=function handleTileEvent(i,j){var gridCopy=grid.map(function(arr){return arr.slice();});gridCopy[i][j]=grid[i][j]?false:true;grid[i][j]?setCellsAlive(cellsAlive-1):setCellsAlive(cellsAlive+1);setGrid(gridCopy);};// TODO: Add Borders around Iteration and CellsAlive header tags\nreturn/*#__PURE__*/_jsxs(\"div\",{className:\"board-container\",children:[/*#__PURE__*/_jsxs(\"h1\",{children:[\"Iteration: \",iteration]}),/*#__PURE__*/_jsx(\"div\",{style:{display:\"grid\",gridTemplateColumns:\"repeat(\".concat(grid[0].length,\", 20px\"),justifyContent:\"center\"},children:grid.map(function(row,i){return grid[i].map(function(val,j){return/*#__PURE__*/_jsx(Tile,{keyID:\"\".concat(i,\"-\").concat(j),tileName:grid[i][j]?\"tile-on\":\"tile-off\",onClick:function onClick(){return handleTileEvent(i,j);}});});})}),/*#__PURE__*/_jsxs(\"h1\",{children:[\"Cells Alive: \",cellsAlive]})]});};export default Board;","map":{"version":3,"sources":["/home/jschneck/programming_projects/JavaScriptProjects/Conways-Game-of-Life/john/src/components/Board.tsx"],"names":["React","Tile","Board","grid","setGrid","iteration","cellsAlive","setCellsAlive","handleTileEvent","i","j","gridCopy","map","arr","slice","display","gridTemplateColumns","length","justifyContent","row","val"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAgC,OAAhC,CACA,MAAOC,CAAAA,IAAP,KAAiB,QAAjB,CACA,MAAO,cAAP,C,wFAWA,GAAMC,CAAAA,KAA2B,CAAG,QAA9BA,CAAAA,KAA8B,MAA6D,IAA1DC,CAAAA,IAA0D,MAA1DA,IAA0D,CAApDC,OAAoD,MAApDA,OAAoD,CAA3CC,SAA2C,MAA3CA,SAA2C,CAAhCC,UAAgC,MAAhCA,UAAgC,CAApBC,aAAoB,MAApBA,aAAoB,CAEhG,GAAMC,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,CAACC,CAAD,CAAYC,CAAZ,CAA0B,CACjD,GAAIC,CAAAA,QAAqB,CAAGR,IAAI,CAACS,GAAL,CAAS,SAAAC,GAAG,QAAIA,CAAAA,GAAG,CAACC,KAAJ,EAAJ,EAAZ,CAA5B,CACAH,QAAQ,CAACF,CAAD,CAAR,CAAYC,CAAZ,EAAiBP,IAAI,CAACM,CAAD,CAAJ,CAAQC,CAAR,EAAa,KAAb,CAAqB,IAAtC,CACAP,IAAI,CAACM,CAAD,CAAJ,CAAQC,CAAR,EAAaH,aAAa,CAACD,UAAU,CAAG,CAAd,CAA1B,CAA6CC,aAAa,CAACD,UAAU,CAAG,CAAd,CAA1D,CACAF,OAAO,CAACO,QAAD,CAAP,CAEA,CAND,CAQA;AACA,mBACC,aAAK,SAAS,CAAC,iBAAf,wBACC,oCACaN,SADb,GADD,cAIC,YACC,KAAK,CAAE,CACNU,OAAO,CAAE,MADH,CAENC,mBAAmB,kBAAYb,IAAI,CAAC,CAAD,CAAJ,CAAQc,MAApB,UAFb,CAGNC,cAAc,CAAE,QAHV,CADR,UAOGf,IAAI,CAACS,GAAL,CAAU,SAACO,GAAD,CAAMV,CAAN,CAAY,CACvB,MACCN,CAAAA,IAAI,CAACM,CAAD,CAAJ,CAAQG,GAAR,CAAa,SAACQ,GAAD,CAAMV,CAAN,CAAY,CACxB,mBACC,KAAC,IAAD,EACC,KAAK,WAAKD,CAAL,aAAUC,CAAV,CADN,CAEC,QAAQ,CAAEP,IAAI,CAACM,CAAD,CAAJ,CAAQC,CAAR,EAAa,SAAb,CAAyB,UAFpC,CAGC,OAAO,CAAE,yBAAMF,CAAAA,eAAe,CAACC,CAAD,CAAIC,CAAJ,CAArB,EAHV,EADD,CAOA,CARD,CADD,CAWA,CAZC,CAPH,EAJD,cAyBC,sCACeJ,UADf,GAzBD,GADD,CA+BA,CA1CD,CA4CA,cAAeJ,CAAAA,KAAf","sourcesContent":["import React, { useState } from 'react';\nimport Tile from './Tile';\nimport \"./styles.css\";\n\n\ninterface BoardProps {\n\tgrid: boolean[][],\n\tsetGrid: (grid: boolean[][]) => void,\n\titeration: number,\n\tcellsAlive: number,\n\tsetCellsAlive: (cellsAlive: number) => void,\n}\n\nconst Board: React.FC<BoardProps> = ({ grid, setGrid, iteration, cellsAlive, setCellsAlive }) => {\n\n\tconst handleTileEvent = (i: number, j: number) => {\n\t\tlet gridCopy: boolean[][] = grid.map(arr => arr.slice());\n\t\tgridCopy[i][j] = grid[i][j] ? false : true;\n\t\tgrid[i][j] ? setCellsAlive(cellsAlive - 1) : setCellsAlive(cellsAlive + 1);\n\t\tsetGrid(gridCopy);\n\t\t\n\t}\n\n\t// TODO: Add Borders around Iteration and CellsAlive header tags\n\treturn (\n\t\t<div className=\"board-container\">\n\t\t\t<h1> \n\t\t\t\tIteration: {iteration}\n\t\t\t</h1>\n\t\t\t<div\n\t\t\t\tstyle={{\n\t\t\t\t\tdisplay: \"grid\",\n\t\t\t\t\tgridTemplateColumns: `repeat(${grid[0].length}, 20px`,\n\t\t\t\t\tjustifyContent: \"center\"\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t{ grid.map( (row, i) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\tgrid[i].map( (val, j) => {\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<Tile \n\t\t\t\t\t\t\t\t\tkeyID={`${i}-${j}`} \n\t\t\t\t\t\t\t\t\ttileName={grid[i][j] ? \"tile-on\" : \"tile-off\"}\t\n\t\t\t\t\t\t\t\t\tonClick={() => handleTileEvent(i, j)} \n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t})\n\t\t\t\t\t)\n\t\t\t\t}) }\n\t\t\t</div>\n\t\t\t<h1>\n\t\t\t\tCells Alive: {cellsAlive}\n\t\t\t</h1>\n\t\t</div>\n\t)\n}\n\nexport default Board;"]},"metadata":{},"sourceType":"module"}