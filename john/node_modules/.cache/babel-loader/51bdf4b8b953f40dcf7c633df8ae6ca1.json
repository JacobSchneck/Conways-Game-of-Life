{"ast":null,"code":"var _jsxFileName = \"/home/jschneck/programming_projects/JavaScriptProjects/typed-Game-of-life/john/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport Board from \"./components/Board\";\nimport \"./App.css\";\nimport RunSimulation from \"./components/Controls/RunSimulation\";\nimport SelectSpeed from \"./components/Controls/SelectSpeed\";\nimport GraphButton from \"./components/Controls/GraphButton\";\nimport ClearBoard from \"./components/Controls/ClearBoard\";\nimport { getCellsAlive } from \"./utils\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const [run, setRun] = useState(false);\n  const [speed, setSpeed] = useState(\"Slow\");\n  const [showGraph, setShowGraph] = useState(false);\n  const [iteration, setIteration] = useState(0);\n  const [cellsAlive, setCellsAlive] = useState(0);\n  const [grid, setGrid] = useState(Array(50).fill(Array(75).fill(0)));\n\n  const getNextState = () => {\n    let nextGrid = grid.map(arr => arr.slice());\n    let nextCellsAlive = 0;\n\n    for (let row = 0; row < grid.length; row++) {\n      for (let col = 0; col < grid[0].length; col++) {\n        let aliveNeighbors = getCellsAlive(grid, row, col);\n\n        if (aliveNeighbors === 3) {\n          // any cell with 3 live cells lives\n          nextGrid[row][col] = true;\n          nextCellsAlive += 1;\n        } else if (aliveNeighbors === 2 && nextGrid[row][col] === true) {\n          // live cells with 2 live cells live\n          nextGrid[row][col] = true;\n          nextCellsAlive += 1;\n        } else {\n          // all else die or stay dead\n          nextGrid[row][col] = false;\n        }\n      }\n    }\n\n    setGrid(nextGrid);\n  };\n\n  useEffect(() => {\n    if (run) {\n      getNextState();\n    }\n  }, [run]);\n\n  const handleRunEvent = () => {\n    setRun(run ? false : true);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"basic-header\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Conway's Game of Life\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(Board, {\n      grid: grid,\n      setGrid: setGrid\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"basic-header\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Controls\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls-container\",\n      children: [/*#__PURE__*/_jsxDEV(RunSimulation, {\n        run: run,\n        handleRunEvent: handleRunEvent\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(ClearBoard, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(SelectSpeed, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(GraphButton, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 3\n  }, this);\n};\n\n_s(App, \"tZvWRS5/Z4Rp4Kiq9GkgeDd643c=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/jschneck/programming_projects/JavaScriptProjects/typed-Game-of-life/john/src/App.tsx"],"names":["useEffect","useState","Board","RunSimulation","SelectSpeed","GraphButton","ClearBoard","getCellsAlive","App","run","setRun","speed","setSpeed","showGraph","setShowGraph","iteration","setIteration","cellsAlive","setCellsAlive","grid","setGrid","Array","fill","getNextState","nextGrid","map","arr","slice","nextCellsAlive","row","length","col","aliveNeighbors","handleRunEvent"],"mappings":"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","sourcesContent":["import { useEffect, useState } from \"react\";\n\nimport Board from \"./components/Board\"\nimport \"./App.css\";\nimport RunSimulation from \"./components/Controls/RunSimulation\";\nimport SelectSpeed from \"./components/Controls/SelectSpeed\";\nimport GraphButton from \"./components/Controls/GraphButton\";\nimport ClearBoard from \"./components/Controls/ClearBoard\";\nimport { getCellsAlive } from \"./utils\";\n\ntype Speed = \"Slow\" | \"Medium\" | \"Fast\" | \"Brrr\"; \n\nconst App: React.FC = () => {\n\tconst [run, setRun] = useState<boolean>(false);\n\tconst [speed, setSpeed] = useState<Speed>(\"Slow\");\n\tconst [showGraph, setShowGraph] = useState<boolean>(false);\n\tconst [iteration, setIteration] = useState<number>(0);\n\tconst [cellsAlive, setCellsAlive] = useState<number>(0);\n\tconst [grid, setGrid] = useState<boolean[][]>(Array(50).fill(Array(75).fill(0)))\n\n\tconst getNextState = () => {\n\t\tlet nextGrid = grid.map( arr => arr.slice());\n\t\tlet nextCellsAlive = 0;\n\n\t\tfor (let row = 0; row < grid.length; row++) {\n\t\t\tfor (let col = 0; col < grid[0].length; col++) {\n\t\t\t\tlet aliveNeighbors = getCellsAlive(grid, row, col);\n\t\t\t\tif (aliveNeighbors === 3) { // any cell with 3 live cells lives\n\t\t\t\t\tnextGrid[row][col] = true;\n\t\t\t\t\tnextCellsAlive += 1;\n\t\t\t\t} else if (aliveNeighbors === 2 && nextGrid[row][col] === true) { // live cells with 2 live cells live\n\t\t\t\t\tnextGrid[row][col] = true;\n\t\t\t\t\tnextCellsAlive += 1;\n\t\t\t\t} else { // all else die or stay dead\n\t\t\t\t\tnextGrid[row][col] = false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tsetGrid(nextGrid);\n\t}\n\n\tuseEffect(() => {\n\t\tif (run) {\n\t\t\tgetNextState()\n\t\t}\n\t}, [run]);\n\n\tconst handleRunEvent = () => {\n\t\tsetRun(run ? false : true);\n\t}\n\n\n\treturn (\n\t\t<div>\n\t\t\t<header className=\"basic-header\">\n\t\t\t\t<h1>\n\t\t\t\t\tConway's Game of Life\n\t\t\t\t</h1>\n\t\t\t</header>\n\t\t\t<Board grid={grid} setGrid={setGrid}/>\n\t\t\t<header className=\"basic-header\">\n\t\t\t\t<h1>\n\t\t\t\t\tControls\t\n\t\t\t\t</h1>\n\t\t\t</header>\n\t\t\t<div className=\"controls-container\">\n\t\t\t\t<RunSimulation run={run} handleRunEvent={handleRunEvent} />\n\t\t\t\t<ClearBoard />\n\t\t\t\t<SelectSpeed />\n\t\t\t\t<GraphButton />\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\n\nexport default App;"]},"metadata":{},"sourceType":"module"}