{"version":3,"sources":["components/Tile.tsx","components/Board.tsx","components/Controls/RunSimulation.tsx","components/Controls/SelectSpeed.tsx","components/Controls/GraphButton.tsx","components/Controls/ClearBoard.tsx","utils.ts","components/Graph.tsx","App.tsx","index.tsx"],"names":["Tile","keyID","tileName","onClick","className","Board","grid","setGrid","iteration","cellsAlive","setCellsAlive","style","display","gridTemplateColumns","length","justifyContent","map","row","i","val","j","gridCopy","arr","slice","handleTileEvent","RunSimulation","run","setRun","runRef","runGame","name","current","SelectSpeed","speed","setSpeed","speedRef","useState","count","setCount","handleSpeedEvent","GraphButton","showGraph","setShowGraph","ClearBoard","setIteration","setIterationArray","setCellsAliveArray","Array","fill","getCellsAlive","col","result","y","Graph","iterationArray","cellsAliveArray","data","labels","datasets","label","borderColor","backgroundColor","tension","options","animation","duration","App","setCellsAlliveArray","useRef","useCallback","g","nextGrid","nextCellsAlive","aliveNeighbors","getNextState","setTimeout","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3324dbb7.chunk.js","sourcesContent":["import React from 'react';\n\nimport \"./styles.css\"\n\ninterface TileProps {\n\tkeyID: string,\n\ttileName: string,\n\tonClick: () => void,\n}\n\nconst Tile: React.FC<TileProps> = ({keyID, tileName, onClick}) => {\n\treturn (\n\t\t<div>\n\t\t\t<div className={tileName} key={keyID} onClick={onClick}></div>\n\t\t</div>\n\t)\n}\n\nexport default Tile;","import React, { useState } from 'react';\nimport Tile from './Tile';\nimport \"./styles.css\";\n\n\ninterface BoardProps {\n\tgrid: boolean[][],\n\tsetGrid: (grid: boolean[][]) => void,\n\titeration: number,\n\tcellsAlive: number,\n\tsetCellsAlive: (cellsAlive: number) => void,\n}\n\nconst Board: React.FC<BoardProps> = ({ grid, setGrid, iteration, cellsAlive, setCellsAlive }) => {\n\n\tconst handleTileEvent = (i: number, j: number) => {\n\t\tlet gridCopy: boolean[][] = grid.map(arr => arr.slice());\n\t\tgridCopy[i][j] = grid[i][j] ? false : true;\n\t\tgrid[i][j] ? setCellsAlive(cellsAlive - 1) : setCellsAlive(cellsAlive + 1);\n\t\tsetGrid(gridCopy);\n\t\t\n\t}\n\n\t// TODO: Add Borders around Iteration and CellsAlive header tags\n\treturn (\n\t\t<div className=\"board-container\">\n\t\t\t<h1> \n\t\t\t\tIteration: {iteration}\n\t\t\t</h1>\n\t\t\t<div\n\t\t\t\tstyle={{\n\t\t\t\t\tdisplay: \"grid\",\n\t\t\t\t\tgridTemplateColumns: `repeat(${grid[0].length}, 20px`,\n\t\t\t\t\tjustifyContent: \"center\"\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t{ grid.map( (row, i) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\tgrid[i].map( (val, j) => {\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<Tile \n\t\t\t\t\t\t\t\t\tkeyID={`${i}-${j}`} \n\t\t\t\t\t\t\t\t\ttileName={grid[i][j] ? \"tile-on\" : \"tile-off\"}\t\n\t\t\t\t\t\t\t\t\tonClick={() => handleTileEvent(i, j)} \n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t})\n\t\t\t\t\t)\n\t\t\t\t}) }\n\t\t\t</div>\n\t\t\t<h1>\n\t\t\t\tCells Alive: {cellsAlive}\n\t\t\t</h1>\n\t\t</div>\n\t)\n}\n\nexport default Board;","import React from \"react\"\n\n// HACK: used any here\ninterface RunSimulationProps {\n\trun: boolean,\n\tsetRun: (run: boolean) => void, // waving the white flag\n\trunGame: () => void,\n\trunRef: any;\n}\n\nconst RunSimulation: React.FC<RunSimulationProps> = ({ \n\trun, \n\tsetRun, \n\trunRef, \n\trunGame, \n}) => {\n\tconst name = run ? \"Stop\" : \"Run\";\n\n\tconst handleRun = () => {\n\t\tsetRun(!run);\n\t\tif (!run) {\n\t\t\trunRef.current = true;\n\t\t\trunGame();\n\t\t}\n\t}\n\t\n\treturn (\n\t\t<div>\n\n\t\t\t<button className=\"control-button\" onClick={() => handleRun()}>\n\t\t\t\t{name}\n\t\t\t</button>\n\t\t</div>\n\n\t);\n}\n\nexport default RunSimulation;","import React, { useState } from \"react\";\nimport Speed from \"../../types/Speed\"\n\ninterface SelectSpeedProps {\n\tspeed: Speed,\n\tsetSpeed: (speed: Speed) => void, \n\tspeedRef: React.MutableRefObject<Speed>,\n}\n\nconst SelectSpeed: React.FC<SelectSpeedProps> = ({ speed, setSpeed, speedRef }) => {\n\tconst [count, setCount] = useState(0);\n\n\tconst handleSpeedEvent = () => {\n\t\tif (count == 3) {\n\t\t\tsetCount(0);\n\t\t} else {\n\t\t\tsetCount(count + 1);\n\t\t}\n\n\t\tswitch (count % 4) {\n\t\t\tcase 0:\n\t\t\t\tsetSpeed(\"Slow\");\n\t\t\t\tspeedRef.current = \"Slow\";\n\t\t\t\tbreak;\n\t\t\tcase 1:\n\t\t\t\tsetSpeed(\"Medium\");\n\t\t\t\tspeedRef.current = \"Medium\";\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tsetSpeed(\"Fast\");\n\t\t\t\tspeedRef.current = \"Fast\";\n\t\t\t\tbreak;\n\t\t\tcase 3:\n\t\t\t\tsetSpeed(\"Brrr\");\n\t\t\t\tspeedRef.current = \"Brrr\";\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn (\n\t\t<div>\n\t\t\t<button className=\"control-button\" onClick={() => handleSpeedEvent()}>\n\t\t\t\t{speed}\n\t\t\t</button>\n\t\t</div>\n\t);\n}\n\nexport default SelectSpeed;","import React from \"react\";\n\ninterface GraphButtonProps {\n\tshowGraph: boolean,\n\tsetShowGraph: (show: boolean) => void,\n}\n\nconst GraphButton: React.FC<GraphButtonProps> = ({ showGraph, setShowGraph }) => {\n\tconst name = showGraph ? \"Hide Graph\" : \"Show Graph\";\n\n\treturn (\n\t\t<div>\n\t\t\t<button className=\"control-button\" onClick={() => setShowGraph(!showGraph)}>\n\t\t\t\t{ name }\n\t\t\t</button>\n\t\t</div>\n\t);\n}\n\nexport default GraphButton;","import React from \"react\";\nimport { setOriginalNode } from \"typescript\";\n\ninterface ClearButtonProps {\n\tsetGrid: (grid: boolean[][]) => void,\n\tsetIteration: (iteration: number) => void,\n\tsetCellsAlive: (cellsAlive: number) => void,\n\tsetIterationArray: (iterationArray: number[]) => void,\n\tsetCellsAliveArray: (cellsAliveArray: number[]) => void,\n}\n\nconst ClearBoard: React.FC<ClearButtonProps> = ({ \n\tsetGrid, \n\tsetIteration, \n\tsetCellsAlive,\n\tsetIterationArray,\n\tsetCellsAliveArray,\n}) => {\n\treturn (\n\t\t<div>\n\t\t\t<button className=\"control-button\" onClick={\n\t\t\t\t() => {\n\t\t\t\t\tsetGrid(Array(50).fill(Array(75).fill(0)))\n\t\t\t\t\tsetIteration(0);\n\t\t\t\t\tsetCellsAlive(0);\n\t\t\t\t\tsetIterationArray([0]);\n\t\t\t\t\tsetCellsAliveArray([0]);\n\t\t\t\t}\n\t\t\t}>\n\t\t\t\tClear\n\t\t\t</button>\n\t\t</div>\n\t);\n}\n\nexport default ClearBoard;","\n/*\n@params: grid: boolean[][], int row, int col\n@result: number of alive adjacent cells\n*/\nexport const getCellsAlive = (grid: boolean[][], row: number, col: number): number => {\n\tlet result = 0;\n\tfor (let i = (row > 0 ? -1 : 0); i < (row < grid.length - 1 ? 2 : 1); i++) {\n\t\tfor (let j = (col > 0 ? -1 : 0); j < (col < grid[0].length - 1 ? 2 : 1); j++) {\n\t\t\tif (i === 0 && j === 0) {\n\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst x = row + i;\n\t\t\tconst y = col + j;\n\t\t\tif (grid[x][y] === true) {\n\t\t\tresult += 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\n\nexport interface NextStateType {\n\tnextGrid: boolean[][],\n\tnextCellsAlive: number,\n}\n\nexport const getNextState = (grid: boolean[][]): NextStateType => {\n\tconst nextGrid = grid.map( arr => arr.slice()); \n\tlet nextCellsAlive = 0;\n\tfor (let row = 0; row < nextGrid.length; row++) {\n\t\tfor (let col = 0; col < nextGrid[0].length; col++) {\n\t\t\tlet aliveNeighbors = getCellsAlive(grid, row, col);\n\t\t\tif (aliveNeighbors === 3) { // any cell with 3 live cells lives\n\t\t\t\tnextGrid[row][col] = true;\n\t\t\t\tnextCellsAlive += 1;\n\t\t\t} else if (aliveNeighbors === 2 && nextGrid[row][col] === true) { // live cells with 2 live cells live\n\t\t\t\tnextGrid[row][col] = true;\n\t\t\t\tnextCellsAlive += 1;\n\t\t\t} else { // all else die or stay dead\n\t\t\t\tnextGrid[row][col] = false;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn { \n\t\tnextGrid, \n\t\tnextCellsAlive \n\t};\n}","import React from 'react';\nimport { Line } from 'react-chartjs-2';\n\ninterface GraphProps {\n\titerationArray: number[], \n\tcellsAliveArray: number[],\n\tshowGraph: boolean,\n}\n\nconst Graph: React.FC<GraphProps> = ({ iterationArray, cellsAliveArray, showGraph }) => {\n\tif (!showGraph) return null;\n\n\tconst data: any = {\n\t\tlabels: iterationArray,\n\t\tdatasets: [{\n\t\tlabel: 'Game Data',\n\t\tdata: cellsAliveArray,\n\t\tfill: false,\n\t\tborderColor: 'rgb(1, 1, 1)',\n\t\tbackgroundColor: 'rgb(1, 1, 1)',\n\t\ttension: 0.1,\n\t\t}]\n\t};\n\n\tconst options = {\n\t\tanimation: {\n\t\t\tduration: 0\n\t\t}\n\t}\n\n\treturn (\n\t\t<div>\n\t\t\t<Line data={data} options={options} />\n\t\t</div>\n\t)\n}\n\n\nexport default Graph;","import { useCallback, useRef, useEffect, useState } from \"react\";\n\nimport Board from \"./components/Board\"\nimport \"./App.css\";\nimport RunSimulation from \"./components/Controls/RunSimulation\";\nimport SelectSpeed from \"./components/Controls/SelectSpeed\";\nimport GraphButton from \"./components/Controls/GraphButton\";\nimport ClearBoard from \"./components/Controls/ClearBoard\";\nimport { getNextState, NextStateType } from \"./utils\";\nimport Speed from \"./types/Speed\";\nimport Graph from \"./components/Graph\";\n\nconst App: React.FC = () => {\n\tconst [run, setRun] = useState<boolean>(false);\n\tconst [speed, setSpeed] = useState<Speed>(\"Slow\");\n\tconst [showGraph, setShowGraph] = useState<boolean>(false);\n\tconst [iteration, setIteration] = useState<number>(0);\n\tconst [cellsAlive, setCellsAlive] = useState<number>(0);\n\tconst [grid, setGrid] = useState<boolean[][]>(Array(50).fill(Array(75).fill(0)))\n\tconst [iterationArray, setIterationArray] = useState<Array<number>>([0]);\n\tconst [cellsAliveArray, setCellsAlliveArray] = useState<Array<number>>([0]);\n\n\tconst runRef = useRef<boolean>(run);\n\trunRef.current = run\n\tconst speedRef = useRef<Speed>(speed);\n\tspeedRef.current = speed;\n\n\tconst runGame = useCallback(() => {\n\t\tif (!runRef.current) {\n\t\t\treturn;\n\t\t}\n\t\t\n\t\t// HACK: jank but it works \n\t\tsetGrid((g) => {\n\t\t\tconst {nextGrid, nextCellsAlive }: NextStateType = getNextState(g);\n\t\t\tsetCellsAlive(nextCellsAlive);\n\t\t\tsetCellsAlliveArray((cellsAliveArray) => [...cellsAliveArray, nextCellsAlive]);\n\t\t\treturn nextGrid;\n\t\t});\n\n\t\tsetIteration( (i) => i + 1); // why does this update everytime but setIteration(i + 1) does not?\n\t\tsetIterationArray((iterationArray) => [...iterationArray, iteration]);\n\n\t\tswitch ( speedRef.current ) {\n\t\t\tcase \"Slow\":\n\t\t\t\tsetTimeout(runGame, 1000);\n\t\t\t\tbreak;\n\t\t\tcase \"Medium\":\n\t\t\t\tsetTimeout(runGame, 500);\n\t\t\t\tbreak;\n\t\t\tcase \"Fast\":\n\t\t\t\tsetTimeout(runGame, 250);\n\t\t\t\tbreak;\n\t\t\tcase \"Brrr\":\n\t\t\t\tsetTimeout(runGame, 100);\n\t\t\t\tbreak;\n\t\t}\n\n\n\t}, []);\n\n\treturn (\n\t\t<div>\n\t\t\t<header className=\"basic-header\">\n\t\t\t\t<h1>\n\t\t\t\t\tConway's Game of Life\n\t\t\t\t</h1>\n\t\t\t</header>\n\t\t\t<Board \n\t\t\t\tgrid={grid} \n\t\t\t\tsetGrid={setGrid} \n\t\t\t\titeration={iteration} \n\t\t\t\tcellsAlive={cellsAlive}\n\t\t\t\tsetCellsAlive={setCellsAlive}\n\t\t\t/>\n\t\t\t<header className=\"basic-header\">\n\t\t\t\t<h1>\n\t\t\t\t\tControls\t\n\t\t\t\t</h1>\n\t\t\t</header>\n\t\t\t<div className=\"controls-container\">\n\t\t\t\t<RunSimulation \n\t\t\t\t\trun={run} \n\t\t\t\t\tsetRun={setRun} \n\t\t\t\t\trunRef={runRef} \n\t\t\t\t\trunGame={runGame} \n\t\t\t\t/>\n\t\t\t\t<ClearBoard \n\t\t\t\t\tsetGrid={setGrid} \n\t\t\t\t\tsetIteration={setIteration} \n\t\t\t\t\tsetCellsAlive={setCellsAlive}\n\t\t\t\t\tsetIterationArray={setIterationArray}\n\t\t\t\t\tsetCellsAliveArray={setCellsAlliveArray}\n\t\t\t\t/>\n\t\t\t\t<SelectSpeed \n\t\t\t\t\tspeed={speed}\n\t\t\t\t\tsetSpeed={setSpeed}\n\t\t\t\t\tspeedRef={speedRef}\n\t\t\t\t/>\n\t\t\t\t<GraphButton \n\t\t\t\t\tshowGraph={showGraph}\n\t\t\t\t\tsetShowGraph={setShowGraph}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t\t<header className=\"basic-header\">\n\t\t\t\t<h1>\n\t\t\t\t\tGraph\t\n\t\t\t\t</h1>\n\t\t\t</header>\n\t\t\t{/* <div style={{background: \"rgb(250, 119, 119)\"}}> */}\n\t\t\t\t<div className=\"graph-container\">\n\t\t\t\t\t<Graph \n\t\t\t\t\t\titerationArray={iterationArray} \n\t\t\t\t\t\tcellsAliveArray={cellsAliveArray} \n\t\t\t\t\t\tshowGraph={showGraph} \n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t{/* </div> */}\n\t\t</div>\n\t)\n}\n\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}